@@once

<link href="//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap-glyphicons.css" rel="stylesheet">
<style>
    .selected{
        color: orange;
    }
    .node {
        position: absolute;
        list-style: none;
        cursor: default;
    }
    .node span {
        margin-right: 3px;
    }
    
    .node .caret {
        font-size: 10px;
    }
</style>
<script>
/**
 * Implements a simple layout for rendering trees in a list style view as seen in file system browsers
 * @author Patrick Oladimeji
 * @date 5/24/14 12:21:50 PM
 */
/*jshint unused: true, undef: true*/
/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50 */
/*global d3*/
(function (d3) {
    d3.layout.treelist = function () {
        "use strict";
        var hierarchy = d3.layout.hierarchy().sort(null).value(null),
            nodeHeight = 20,
            childIndent = 20,
            size;

        var treelist = function (d, i) {
            var nodes = hierarchy.call(this, d, i),
                root = nodes[0];

            function visit(f, t, index, parent) {
                if (t) {
                    f(t, index, parent);
                }
                var children = t.children;
                if (children && children.length) {
                    children.forEach(function (child, ci) {
                        visit(f, child, ci, t);
                    });
                }
            }

            /**
             visit all nodes in the tree and set the x, y positions
            */
            function layout(node) {
                //all children of the same parent are rendered on the same  x level
                //y increases every time a child is added to the list 
                var x = 0, y = 0;
                visit(function (n, index, parent) {
                    x = parent ? parent.x + childIndent : 0;
                    y = y + nodeHeight;
                    n.y = y;
                    n.x = x;

                }, node);
                //update size after visiting
                size = [x, y];
            }

            layout(root);
            return nodes;
        };

        treelist.size = function () {
            return size;
        };

        treelist.nodeHeight = function (d) {
            if (arguments.length) {
                nodeHeight = d;
                return treelist;
            }
            return nodeHeight;
        };

        treelist.childIndent = function (d) {
            if (arguments.length) {
                childIndent = d;
                return treelist;
            }
            return childIndent;
        };

        treelist.nodes = treelist;

        return treelist;
    };

}(d3));

function showTree(aPathToJson, id) {
          d3.json(aPathToJson, function (err, data) {
                var tree = d3.layout.treelist()
                    .childIndent(10)
                    .nodeHeight(30);
                var ul = (id?d3.select('#"=id):d3.select("body")).append("ul").classed("treelist", "true");

                function render(data, parent) {
                    var nodes = tree.nodes(data),
                        duration = 250;
                    function toggleChildren(d) {
                        if (d.children) {
                            d._children = d.children;
                            d.children = null;
                        } else if (d._children) {
                            d.children = d._children;
                            d._children = null;
                        }
                    }

                    var nodeEls = ul.selectAll("li.node").data(nodes, function (d) {
                        d.id = d.id || ++id;
                        return d.id;
                    });
                    //entered nodes
                    var entered = nodeEls.enter().append("li").classed("node", true)
                        .style("top", parent.y +"px")
                        .style("opacity", 0)
                        .style("height", tree.nodeHeight() + "px")
                        .on("click", function (d) {
                            toggleChildren(d);
                            console.log(JSON.stri)
                            render(data, d);
                        })
                        .on("mouseover", function (d) {
                            d3.select(this).classed("selected", true);
                        })
                        .on("mouseout", function (d) {
                            d3.selectAll(".selected").classed("selected", false);
                        });
                    //add arrows if it is a folder
                    entered.append("span").attr("class", function (d) {
                        var icon = d.children ? " glyphicon-chevron-down"
                            : d._children ? "glyphicon-chevron-right" : "";
                        return "caret glyphicon " + icon;
                    });
                    //add icons for folder for file
                    entered.append("span").attr("class", function (d) {
                        var icon = d.children || d._children ? "glyphicon-folder-close"
                            : "glyphicon-file";
                        return "glyphicon " + icon;
                    });
                    //add text
                    entered.append("span").attr("class", "filename")
                        .html(function (d) { return d.name; });
                    //update caret direction
                    nodeEls.select("span.caret").attr("class", function (d) {
                        var icon = d.children ? " glyphicon-chevron-down"
                            : d._children ? "glyphicon-chevron-right" : "";
                        return "caret glyphicon " + icon;
                    });
                    //update position with transition
                    nodeEls.transition().duration(duration)
                        .style("top", function (d) { return (d.y - tree.nodeHeight()) + "px";})
                        .style("left", function (d) { return d.x + "px"; })
                        .style("opacity", 1);
                    nodeEls.exit().remove();
                }

                render(data, data);

            });	
}

</script>