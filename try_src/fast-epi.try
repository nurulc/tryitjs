!md
# Fast risk factor

This is a more optimized risk factor calculator usin the log(e(x)) = log(Total) property. This linearizes the problem.

!tryit
        
        var LogTC = class { 
            constructor(factorEstimates, factorIndicators, realFactor) {
                if(factorEstimates.factorFlag) {
                    this.factorFlag = factorEstimates.factorFlag;
                    this.logReal = factorEstimates.logReal; 
                } 
                else {
                    this.factorFlag = Array.isArray(factorIndicators)? factorIndicators.slice() : factorIndicators();
                    this.logReal = (this.getRisk(realFactor)+Math.log((1 + normalSample())*1.5)); // log(realCost)
                }
                this.logCurrent = 0; // log of current cost
            }

            get real() { return Math.exp(this.logReal); }
            get current() { return Math.exp(this.logCurrent); }

            getRisk(factors) {
                let sumOfFactors = (total, v, i) => total+(v?factors[i]:0);
                return this.factorFlag.reduce(sumOfFactors, 0);
            }

            getCostIndex(factors) {
                    return sum(this.factorFlag, ((s, v, i) => v?s+factor[i]:s));
            }

            hasRiskFactor(i) {
                return !!this.factorFlag[i];
            }

            setCurrent(factorEstimates) {
                this.logCurrent = this.getRisk(factorEstimates);
            }

            // derivitive of the factor with respect to factor[i], this is used to perform a gradient descent
            // search to the optimal value of the factors so that RMS difference of actual cost to computed cost based
            // on the factors is minimized.
            dx(i,scale=1) {
                if(!this.hasRiskFactor(i)) return 0;
                return -(this.logCurrent-this.logReal)/scale;
            }
        }



!tryit
        //           Base comp1 comp2 ...
        var actualFactors = [300, 1.3,  1.05,  1.11, 1.80, 1.52, 1.01].map(x => Math.log(x)); // the actual values of the factors


        // factorEstimates represents the values we are trying to compute from the data 
        // (hopefully the values will be close to the values in ```actualFactors```)
        var factorEstimates =  [ 1,  1,    1,     1,    1, 1, 1];



        function getKeyData(epiList, factorEstimates) {
            epiList.forEach(e => e.setCurrent(factorEstimates));
            let key = epiList.map(e => e.logCurrent);
            let val = epiList.map(e => e.real);
            return [key, val];
        }
        

        
        function getTotal(epi) {
            return sum(epi.map(t => t.real));
        }

        // sum the derivitives of factor 'i' 
        // function dx(episodes,i) {
        //     return episodes.reduce((sum,t) => sum+t.dx(i), 0)/episodes.length;
        // }

        // function computeUpdatedFactors(episodes, factorEstimates, ep) {
        //     let res =  factorEstimates.map( (c,i) => c+(dx(episodes,i)*ep));
        //     episodes.forEach(t => t.setCurrent(res));
        //     return res;
        // }


        function Test(epiList, ITER, EPSILON, EPI_COUNT, Episode=LogTC, scaleFn=undefined ) {
            var episodesL;
            if(epiList===undefined) {
                 epiFlags = range(EPI_COUNT).map( () => fill())
                 episodesL = epiFlags.map((fill) => new Episode(factorEstimates,fill, actualFactors));
            }
            else { 
                episodesL = epiList.map((e) => new Episode(e));
            }
            var total=sum(episodesL.map(t => t.real));;
            //$$.D(dx(episodesL, 3), episodesL.length );
            let tcomp = factorEstimates;
            if(!scaleFn) scaleFn = (i) => episodesL.length;
            else scaleFn = scaleFn(episodesL, tcomp);
            let results = [];
            for(let i=0; i< ITER; i++) {
                tcomp = computeUpdatedFactors(episodesL, tcomp, EPSILON,scaleFn);
                results.push(tcomp);
            }
            let costToMember = sum(episodesL.map(t => rect(t.real-t.current)));
            let costSaved = sum(episodesL.map(t => rect(t.current-t.real)));
            let outOfPocketMembers = sum(episodesL.map(t => clamp(t.real-t.current)));
            $$.D(sum(episodesL.map(t => t.real-t.current)), costToMember/outOfPocketMembers, costToMember, total, costSaved, 
                     outOfPocketMembers, max(episodesL.map(t => t.real-t.current)));
            return [results, [tcomp.map((v,i) => (Math.exp(v)-Math.exp(actualFactors[i]))/Math.exp(actualFactors[i])*100+'%'), expL(tcomp), expL(actualFactors)]];

        }  

        var [results, rest] = Test(episodes, ITER, 0.05, EPI_COUNT,LogTC, (epiList) => () => epiList.length);
        rest;
            //var t = new C();
            //t.getRisk(actualFactors);
            //$$.D(actualFactors, t.getRisk(actualFactors));
            //t

!md
        
        # Factor based optimization
        This section we will show how the multiplicative concept of optimization can be used compute the gradient descent
        algorithm
!head
    <script src="https://d3js.org/d3.v4.js"></script>
!tryit
     
    var EpiFactor = class  extends TreatmentCost {
            dx(i) {
                if(!this.hasRiskFactor(i)) return 0;
                return -(this.current-this.real)*this.current;
            }
    };

    Test(episodes, 4000, 0.025, EPI_COUNT,EpiFactor, (epiList,factors) => (i) => factors[i]*epiList.length);
!md
    ## D3 Graphing


!tryit
    var id = document.getElementById('my_dataviz');
    id.innerHTML = '';
    var margin = {top: 10, right: 30, bottom: 30, left: 60},
        width = 1024 - margin.left - margin.right,
        height = 512 - margin.top - margin.bottom;
        // append the svg object to the body of the page
        var svg = d3.select("#my_dataviz")
          .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
          .append("g")
            .attr("transform",
                  "translate(" + margin.left + "," + margin.top + ")")

    //Read the data
    d3.csv("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/2_TwoNum.csv", function(data) {

      // Add X axis
      var x = d3.scaleLinear()
        .domain([0, 0])
        .range([ 0, width ]);
      svg.append("g")
        .attr("class", "myXaxis")   // Note that here we give a class to the X axis, to be able to call it later and modify it
        .attr("transform", "translate(0," + height + ")")
        .call(d3.axisBottom(x))
        .attr("opacity", "0")

      // Add Y axis
      var y = d3.scaleLog()
        .domain([1, 500000])
        .range([ height, 0]);
      svg.append("g")
        .call(d3.axisLeft(y));

      // Add dots
      svg.append('g')
        .selectAll("dot")
        .data(data)
        .enter()
        .append("circle")
          .attr("cx", function (d) { return x(d.GrLivArea); } )
          .attr("cy", function (d) { return y(d.SalePrice); } )
          .attr("r", 1.5)
          .style("fill", "#69b3a2")

      // new X axis
      x.domain([0, 4000])
      svg.select(".myXaxis")
        .transition()
        .duration(2000)
        .attr("opacity", "1")
        .call(d3.axisBottom(x));

      svg.selectAll("circle")
        .transition()
        .delay(function(d,i){return(i*3)})
        .duration(2000)
        .attr("cx", function (d) { return x(d.GrLivArea); } )
        .attr("cy", function (d) { return y(d.SalePrice); } )
    });
    0
!html
    <div id="my_dataviz"></div>